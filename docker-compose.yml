# This is the docker-compose-yml file that must be able to start
# your group's backend.

# Remember to comment this file well!

# After you have Docker and Docker Compose installed,
# and this file is ready, you use this file and run it with:
# `docker-compose up --build`

version: "3"

services:
  # An example configuration of server A for groups' convenience.
  # server-a is based on the Docker image the groups produce and build themselves.
  server-a:
    # Change the image information to match your server A image
    image: groupbgl/node-server-a
    # 'depends_on' and 'command' are  to be used when used
    # with RabbitMQ service in this file. 'depends_on' must be set
    # to RabbitMQ service's name from this file, and 'command'
    # can be modified to be anything, but what is given should
    # work. Just uncomment them
    depends_on:
      -  rapid-runner-rabbit
    command: ["./utils/wait-for-it.sh", "rapid-runner-rabbit:5672", "--",  "npm", "start"]
    build:
      dockerfile: Dockerfile
      context:  ./backend/server-a
    # volumes:
    #   - ./server-a:/app/server-a
    # environment:
    #   - PORT=3001
    #   - URL=http://localhost
    #   - MONGO_URL=mongodb://mongo:27017
    #   - DB_NAME=sandwichProject
    #   - API_VERSION=v1
    ports:
      # - "12345:8080"
      - "3001:3001"
    # networks:
    #   - backend

  # You can base this service on a rabbitmq Docker Hub image.
  # You need to expose the RabbitMQ port to other containers
  # in this  docker-compose.yml
  # A set of needed Docker instructions like 'image:' are shown
  # below, groups should set their values. Groups are free to
  # CRUD the set of instructions as they see fit.
  rapid-runner-rabbit:
    image: rabbitmq:3.8-management # Use the management image
    ports:
      - "5672:5672" # AMQP port
      - "15672:15672" # Management port
    expose:
      - "5672"
      - "15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - rabbit_network

  # much of the server-b service entry can be copied from server-a
  # service above. server-b directory Dockerfile has more
  # information.
  # A set of needed Docker instructions like 'image:' are shown
  # below, groups should set their values. Groups are free to
  # CRUD this set of instructions as they see fit.
  server-b:
    image: groupbgl/node-server-b
    depends_on:
      -  rapid-runner-rabbit
    command: ["./utils/wait-for-it.sh", "rapid-runner-rabbit:5672", "--",  "npm", "start"]
    # build:
    #   dockerfile:
    #   context:
    # expose:
    # networks:
    build:
      dockerfile: Dockerfile
      context:  ./backend/server-b
    ports:
      # - "12345:8080"
      - "3002:3002"

  mongo:
    image: mongo
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
  # Your group might want to use a database to store some data
  # You can use any database you wish, PostgreSQL, MySQL and
  # MongoDB have rather good Docker documentation and examples.
  # But some groups could find a way to do this without
  # databases
  # database-service would go here.
  #database:

# Here we create a named network, that all the backend components
# must be added to for them to be able to communicate through
# exposed ports.
# networks:
#   backend:

# If you use databases for storing information, you can define
# their volumes here.
# Documentation: https://docs.docker.com/storage/volumes/
# Personally I like to look at the database's image's Dockerfile
# in the Docker Hub to see what directory it uses to store data.
# volumes:

volumes:
  mongo_data:

networks:
  rabbit_network:
    driver: bridge
